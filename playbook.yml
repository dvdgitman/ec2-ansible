---
# playbook file for creating EC2 instances
- name: Deployment Of EC2 instances
  become: yes
  hosts: localhost
#var file created with vault create
  vars_files:
    - pass.yml
#install required files for using AWS
  tasks:
    - name: Make Sure boto,boto3,docker-py are Installed
      pip:
        name:
          - boto
          - boto3
          - docker-py
        state: present
# create security group for the EC2 instances
    - name: Creating Security Group for EC2 on AWS
      ec2_group:
        name: MySecurityGroup
        description: MySecurityGroup
        region: us-east-2
# loading AWS access and secret keys from pass.yml
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        rules:
           - proto: tcp
             from_port: 22
             to_port: 22
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             from_port: 80
             to_port: 80
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             from_port: 8080
             to_port: 8080
             cidr_ip: 0.0.0.0/0
           - proto: tcp
             from_port: 443
             to_port: 443
             cidr_ip: 0.0.0.0/0
        rules_egress:
           - proto: all
             cidr_ip: 0.0.0.0/0
# creating 2 EC2 instances
    - name: Create First Instance
      ec2:
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        key_name: ansible
        instance_type: t2.micro
        image: ami-0a91cd140a1fc148a
        region: us-east-2
        wait: yes
        group: MySecurityGroup
        count: 1
        vpc_subnet_id: subnet-d34b319f
        assign_public_ip: yes
        instance_tags:
          Name: First EC2
# register ec2 as variable
      register: ec2

    - name: Create Second Instance
      ec2:
        aws_access_key: "{{ec2_access_key}}"
        aws_secret_key: "{{ec2_secret_key}}"
        key_name: ansible
        instance_type: t2.micro
        image: ami-0a91cd140a1fc148a
        region: us-east-2
        wait: yes
        group: MySecurityGroup
        count: 1
        vpc_subnet_id: subnet-d34b319f
        assign_public_ip: yes
        instance_tags:
          Name: Second EC2
# register ec21 as variable
      register: ec21
# adding instance's public_ip to host file
    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: firstec2
      loop: "{{ ec2.instances }}"

    - name: Add new instance to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: firstec21
      loop: "{{ ec21.instances }}"
# connecting to EC2 instances via SSH
    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        state: started
      loop: "{{ ec2.instances }}"

    - name: Wait for SSH to come up
      wait_for:
        host: "{{ item.public_dns_name }}"
        port: 22
        state: started
      loop: "{{ ec21.instances }}"
# Run first role to install docker and build docker image
- hosts: firstec2
  gather_facts: yes
  tasks:
  - name: running role
    include_role:
      name: ec2-1
# Run second role to pull docker image
- hosts: firstec21
  gather_facts: yes
  tasks:
  - name: running role
    include_role:
      name: ec2-2
